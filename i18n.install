<?php

/**
 * @file
 * Installation file for Internationalization (i18n) module.
 */

/**
 * Implements hook_install().
 */
function i18n_install() {
  // Set module weight for it to run after core modules.
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'i18n' AND type = 'module'");
}

/**
 * Add fields to the schema if they don't exist.
 *
 * @param string $table
 *   The name of the database table.
 * @param array $fields
 *   The list of database fields to create.
 * @param bool $force_rebuild_schema
 *   Whether to force backdrop_get_schema() to rebuild the schema. This may be
 *   necessary when additional implementations of hook_schema_alter() have
 *   become available since the schema was originally built.
 */
function i18n_install_create_fields($table, $fields, $force_rebuild_schema = FALSE) {
  static $schema;
  $rebuild_schema = !isset($schema) || $force_rebuild_schema;
  $schema = backdrop_get_schema($table, $rebuild_schema);
  foreach ($fields as $field) {
    if (!empty($schema['fields'][$field])) {
      if (!db_field_exists($table, $field)) {
        db_add_field($table, $field, $schema['fields'][$field]);
      }
      else {
        // The field exists, make sure field definition is up to date.
        db_change_field($table, $field, $field, $schema['fields'][$field]);
      }
    }
  }
}

/**
 * Implements hook_update_last_removed().
 */
function i18n_update_last_removed() {
  return 7001;
}

/**
 * Empty update.
 */
function i18n_update_1000() {
  // Empty.
}

/**
 * Disable deprecated sub-modules: i18n_user, i18n_variable, i18n_block.
 */
function i18n_update_1001() {
  db_delete('system')
    ->condition('name', array('i18n_user', 'i18n_variable', 'i18n_block'), 'IN')
    ->execute();
}

/**
 * Convert the config translatables from variable_store to locale.
 */
function i18n_update_1002() {
  if (!db_table_exists('variable_store')) {
    return;
  }

  // Check _config_translatables for all config files.
  $config_info_all = config_get_info();
  foreach ($config_info_all as $prefix => $config_info) {
    $config = config($prefix);
    if ($config->get('_config_translatables') !== NULL) {
      foreach ($config->get('_config_translatables') as $translatable) {
        // Trigger staging for locale.
        // At this point the result is untranslated but that's okay.
        $t = locale($config->get($translatable), 'config:' . $prefix . ':' . $translatable);
        $lid = db_select('locales_source', 'ls')
          ->fields('ls', array('lid'))
          ->condition('ls.context', 'config:' . $prefix . ':' . $translatable, '=')
          ->execute()
          ->fetchField();

        if (empty($lid)) {
          continue;
        }
        // Get translations from variable_store for each language.
        // Skip the default language.
        $default_language = language_default();
        // @todo Convert the name to include the prefix but in d7 format.
        // The config user.mail.cancel_confirm_body should be
        // user_mail_cancel_confirm_body in Drupal 7.
        // For now we just find the fuzzy name.
        $translations = db_select('variable_store', 'vs')
          ->fields('vs', array('realm_key', 'value'))
          ->condition('vs.name', '%' . db_like($translatable) . '%', 'LIKE')
          ->condition('vs.realm_key', $default_language->langcode, '<>')
          ->execute()
          ->fetchAll();

        // Create locales_target for each language.
        foreach ($translations as $translation) {
          db_insert('locales_target')
          ->fields(array(
            'lid' => $lid,
            'translation' => $translation->value,
            'language' => $translation->realm_key,
          ))
          ->execute();
        }

      }
    }
  }
}

/**
 * Move block translations to custom block configuration files.
 */
function i18n_update_1003() {
  // Get the custom block config and search for block translations.
  $block_names = config_get_names_with_prefix('block.custom');
  foreach ($block_names as $block_name) {
    $config = config($block_name);
    // Get all languages except for the default.
    $languages = language_list(FALSE, TRUE);
    $default_langcode = config_get('system.core', 'language_default');
    unset($languages[$default_langcode]);
    foreach ($languages as $langcode) {
      $translated_title = locale($config->get('title'), 'block:' . $config->get('delta') . ':title', $langcode);
      $translated_body = locale($config->get('body.value'), 'block:' . $config->get('delta') . ':body', $langcode);
      // Save translations for each language.
      // We assume some settings are the same as the default language.
      $config->set('translations.' . $langcode, array(
        'info' => $config->get('info'),
        'description' => $config->get('description'),
        'title' => $translated_title,
        'body' => array(
          'value' => $translated_body,
          'format' => $config->get('body.format'),
        ),
      ));
    }
    $config->save();
  }
}
