<?php

/**
 * @file
 * Installation file for i18n_taxonomy module.
 */

/**
 * Set language field in its own table.
 * Do not drop node.language now, just in case.
 * TO-DO: Drop old tables, fields.
 */
function i18n_taxonomy_install() {
  module_load_install('i18n');
  // i18n_install_create_fields('taxonomy_vocabulary', array('language', 'i18n_mode'), TRUE);.
  i18n_install_create_fields('taxonomy_term_data', array('language', 'i18n_tsid'));
  // Set module weight for it to run after core modules, but before views.
  db_query("UPDATE {system} SET weight = 5 WHERE name = 'i18n_taxonomy' AND type = 'module'");
}

/**
 * Implements hook_uninstall().
 */
function i18n_taxonomy_uninstall() {
  db_drop_field('taxonomy_vocabulary', 'language');
  db_drop_field('taxonomy_vocabulary', 'i18n_mode');
  db_drop_field('taxonomy_term_data', 'language');
  db_drop_field('taxonomy_term_data', 'i18n_tsid');
  variable_del('i18n_taxonomy_vocabulary');
}

/**
 * Implements hook_schema_alter().
 */
function i18n_taxonomy_schema_alter(&$schema) {
  // $schema['taxonomy_vocabulary']['fields']['language'] = array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => LANGUAGE_NONE);
  // $schema['taxonomy_vocabulary']['fields']['i18n_mode'] = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0);
  $schema['taxonomy_term_data']['fields']['language'] = array('type' => 'varchar', 'length' => 12, 'not null' => TRUE, 'default' => LANGUAGE_NONE);
  $schema['taxonomy_term_data']['fields']['i18n_tsid'] = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0);
}

/**
 * Implements hook_disable()
 */
function i18n_taxonomy_disable() {
  foreach (field_info_fields() as $fieldname => $field) {
    if ($field['type'] == 'taxonomy_term_reference' && $field['settings']['options_list_callback'] == 'i18n_taxonomy_allowed_values') {
      $field['settings']['options_list_callback'] = NULL;
      field_update_field($field);
    }
  }
}

/**
 * Implements hook_update_last_removed().
 */
function i18n_taxonomy_update_last_removed() {
  return 7004;
}

/**
 * Move book settings from variables to config.
 */
function i18n_taxonomy_update_1000() {
  // Migrate variables to config.
  // $config = config('i18n_taxonomy.settings');
  // $config->set('i18ntaxonomy_vocabulary', update_variable_get('i18ntaxonomy_vocabulary',array()));
  // $config->save();
  // Delete variables.
  // update_variable_del('book_allowed_types');
  // update_variable_del('i18ntaxonomy_vocabulary');.
}
