<?php

/**
 * @file
 * Test case for multilingual taxonomy.
 */

require_once __DIR__ . '/../../tests/i18n.test';
/**
 * Simpletest class for i18n_taxonomy.
 */
class I18nTaxonomyTestCase extends Backdropi18nTestCase {

  /**
   * Set up test case.
   */
  public function setUp() {
    parent::setUp(array('i18n_taxonomy', 'field_test'));
    parent::setUpLanguages();

    // Create users.
    $filtered_html_format = filter_format_load('filtered_html');
    $full_html_format = filter_format_load('full_html');
    $this->admin_user = $this->backdropCreateUser(array(
      'access field_test content',
      'administer field_test content',
      'administer taxonomy',
      'administer languages',
      'administer site configuration',
      filter_permission_name($filtered_html_format),
      filter_permission_name($full_html_format),
    ));
    $this->translator = $this->backdropCreateUser(array('translate interface', 'translate user-defined strings'));
  }

  /**
   * Test localization of taxonomy vocabs and terms.
   */
  public function testTaxonomyTermLocalize() {
    $this->backdropLogin($this->admin_user);
    // Make Input Format "Filter Text" translatable.
    $edit = array(
      'i18n_string_allowed_formats[filtered_html]' => 'filtered_html',
      'i18n_string_allowed_formats[plain_text]' => 'plain_text',
    );
    $this->backdropPost('admin/config/regional/i18n/strings', $edit, t('Save configuration'));

    // Create a localizable vocabulary.
    $vocab = $this->createVocabulary(array('i18n_mode' => I18N_MODE_LOCALIZE));
    $this->assertEqual(i18n_taxonomy_vocabulary_mode($vocab->machine_name), I18N_MODE_LOCALIZE, 'A vocabulary has been created and it is localizable.');

    $this->field_name = $this->createTermField($vocab->machine_name);

    // Create a term to be localized.
    // We use a common prefix to facilitate the testing
    // of autocomplete suggestions.
    $prefix = $this->randomName() . '_';
    $term = $this->createTerm(array(
      'vocabulary' => $vocab->machine_name,
      'name' => $prefix . $this->randomName(),
      'description[value]' => $prefix . $this->randomName(),
    ));
    $this->backdropLogin($this->translator);
    // Create and Save Spanish translation, again using the same prefix.
    $term_translation = array(
      'name' => $this->createStringTranslation('taxonomy', $term->name, array($this->secondaryLanguage => $prefix . $this->randomName())),
      'description[value]' => $this->createStringTranslation('taxonomy', $term->description, array($this->secondaryLanguage => $prefix . $this->randomName())),
    );

    $this->backdropLogin($this->admin_user);

    $langcode = LANGUAGE_NONE;
    $edit = array(
      "{$this->field_name}[$langcode]" => array($term->tid),
    );

    // Test the widgets in the original language.
    $this->backdropGet('test-entity/add/test-bundle');
    $this->assertText($term->name, 'Widget values are displayed correctly in default language.');

    $this->backdropPost(NULL, $edit, t('Save'));
    $this->assertText($term->name, 'Field values are displayed correctly in default language.');

    // Terms should be localized in the field widget.
    $this->backdropGet($this->secondaryLanguage . '/test-entity/add/test-bundle');
    $this->assertText($term_translation['name'][$this->secondaryLanguage], 'Widget values are displayed correctly in non-default languages.');

    $this->backdropPost(NULL, $edit, t('Save'));
    $this->assertText($term_translation['name'][$this->secondaryLanguage], 'Field values are displayed correctly in non-default languages.');

    // Term name and term description should be localized.
    $this->backdropGet('taxonomy/term/' . $term->tid, array('language' => i18n_language_object($this->defaultLanguage)));
    $this->assertText($term->name, 'Term title is displayed correctly in default language.');
    $this->assertText($term->description, 'Term description is displayed correctly in default language.');

    // Term name and term description should be localized.
    $this->backdropGet('taxonomy/term/' . $term->tid, array('language' => i18n_language_object($this->secondaryLanguage)));
    $this->assertText($term_translation['name'][$this->secondaryLanguage], 'Term title is displayed correctly in non-default language.');
    $this->assertText($term_translation['description[value]'][$this->secondaryLanguage], 'Term description is displayed correctly in non-default language.');

    // Autocomplete should respect localization.
    $autocomplete_path = 'taxonomy/autocomplete/' . $this->field_name . '/' . $prefix;
    $autocomplete_values = $this->backdropGetAJAX($autocomplete_path);
    $this->assertTrue(isset($autocomplete_values[$term->name]), 'Correct autocomplete suggestions in default language.');
    $this->assertFalse(isset($autocomplete_values[$term_translation['name'][$this->secondaryLanguage]]), 'No incorrect autocomplete suggestions in non-default languages');

    /*
    // Autocomplete should respect localization, but doesn't.
    $autocomplete_path = $this->secondaryLanguage . '/taxonomy/autocomplete/' . $this->field_name . '/' . $prefix;
    $autocomplete_values = $this->backdropGetAJAX($autocomplete_path);
    $this->assertFalse(isset($autocomplete_values[$term->name]), 'Correct autocomplete suggestions in non-default languages.');
    $this->assertTrue(isset($autocomplete_values[$term_translation[$this->secondaryLanguage]]), 'No incorrect autocomplete suggestions in non-default languages.');.
    */
  }

  /**
   * Test taxonomy term translation sets.
   */
  public function testTaxonomyTermTranslate() {
    // Create a translateable vocabulary.
    $vocab = $this->createVocabulary(array('i18n_mode' => I18N_MODE_TRANSLATE));
    $this->assertEqual(i18n_taxonomy_vocabulary_mode($vocab->machine_name), I18N_MODE_TRANSLATE, 'A vocabulary has been created and it is translateable.');

    $this->field_select = $this->createTermField($vocab->machine_name);
    $this->field_autocomplete = $this->createTermField($vocab->machine_name, 'taxonomy_autocomplete');

    // Create a term to be translated.
    $en_term = $this->createTerm(array('vocabulary' => $vocab->machine_name, 'langcode' => $this->defaultLanguage));
    $es_term = $this->createTerm(array('vocabulary' => $vocab->machine_name, 'langcode' => $this->secondaryLanguage));

    $this->backdropLogin($this->admin_user);

    // Set terms as translations of each other.
    $edit = array(
      'translations[' . $this->defaultLanguage . ']' => $en_term->name,
      'translations[' . $this->secondaryLanguage . ']' => $es_term->name,
    );
    $this->backdropPost('admin/structure/taxonomy/' . $vocab->machine_name . '/list/sets/add', $edit, t('Save'));
    $this->backdropGet('admin/structure/taxonomy/' . $vocab->machine_name . '/list/sets');
    // Translation set appears on listing page and links are correct.
    $this->assertText("{$en_term->name} / {$es_term->name}", 'Translation set title is correct.');
    $en_link_raw = '<a href="/taxonomy/term/' . $en_term->tid . '">' . $en_term->name . '</a>';
    $this->assertRaw($en_link_raw, 'Primary language term link is correct.');
    $es_link_raw = '<a href="/' . $this->secondaryLanguage . '/taxonomy/term/' . $es_term->tid . '">' . $es_term->name . '</a>';
    $this->assertRaw($es_link_raw, 'Secondary language term link is correct.');

    // Freetagging creates terms with the correct language.
    $freetag_en = $this->randomName();
    $freetag_es = $this->randomName();
    $edit = array(
      'translations[' . $this->defaultLanguage . ']' => $freetag_en,
      'translations[' . $this->secondaryLanguage . ']' => $freetag_es,
    );
    $this->backdropPost('admin/structure/taxonomy/' . $vocab->machine_name . '/list/sets/add', $edit, t('Save'));
    $new_term_en = taxonomy_term_load_multiple_by_name($freetag_en, $vocab->machine_name);
    $new_term_en = reset($new_term_en);
    $this->assertEqual($new_term_en->langcode, $this->defaultLanguage, 'New term in default language has correct langcode');
    $new_term_es = taxonomy_term_load_multiple_by_name($freetag_es, $vocab->machine_name);
    $new_term_es = reset($new_term_es);
    $this->assertEqual($new_term_es->langcode, $this->secondaryLanguage, 'New term in secondary language has correct langcode');
  }

  /**
   * Tests options_list_callback.
   *
   * Tests the implementation of 'options_list_callback' for term reference fields.
   * Enable and disable the callback properly. Avoid WSOD!
   */
  public function testTaxonomyFieldCallback() {
    $field_name = 'taxonomy_term_test_field';
    $field = field_create_field(array(
      'field_name' => $field_name,
      'type' => 'taxonomy_term_reference',
    ));
    $field = field_info_field($field_name);
    $callback = 'i18n_taxonomy_allowed_values';
    $this->assertTrue(function_exists($callback), "Function $callback exists.");
    $this->assertEqual($field['settings']['options_list_callback'], $callback, "$callback ist option list callback.");
    module_disable(array('i18n_taxonomy'));
    $field = field_info_field($field_name);
    $this->assertNotEqual($field['settings']['options_list_callback'], $callback, "$callback ist option list callback.");
  }

  /**
   * Returns a new vocabulary with random properties.
   */
  public function createVocabulary($edit = array()) {
    // Create a vocabulary via UI.
    $this->backdropLogin($this->admin_user);
    $this->backdropGet('admin/structure/taxonomy');
    $this->clickLink(t('Add vocabulary'));
    $name = $this->randomName(16);
    $machine_name = backdrop_strtolower($name);
    $edit += array(
      'name' => $name,
      'description' => $this->randomName(32),
      'machine_name' => $machine_name,
      'language' => TAXONOMY_LANGUAGE_ENABLED,
    );
    $this->backdropPost(NULL, $edit, t('Save'));
    $vocabulary = taxonomy_vocabulary_load($machine_name);
    return $vocabulary;
  }

  /**
   * Returns a new term with random properties in vocabulary $vid.
   */
  public function createTerm($edit = array()) {
    $edit += array(
      'name' => $this->randomName(),
      'description[value]' => $this->randomName(),
      'vocabulary' => 1,
    );
    $vocabulary = $edit['vocabulary'];
    unset($edit['vocabulary']);
    $this->backdropLogin($this->admin_user);
    $this->backdropPost('admin/structure/taxonomy/' . $vocabulary . '/add', $edit, t('Save'));
    $term = taxonomy_term_load_multiple_by_name($edit['name'], $vocabulary);
    return reset($term);
  }

  /**
   * Setup a field and instance.
   */
  public function createTermField($machine_name, $widget = 'options_select') {
    $field_name = backdrop_strtolower($this->randomName());

    $this->field = array(
      'field_name' => $field_name,
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $machine_name,
            'parent' => '0',
          ),
        ),
      ),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => $widget,
      ),
      'display' => array(
        'full' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );
    field_create_instance($this->instance);

    return $field_name;
  }

}
