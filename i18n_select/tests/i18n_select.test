<?php
/**
 * @file
 * Test language selection modes
 */

require_once __DIR__ . '/../../tests/i18n.test';

/**
 *
 */
class i18nSelectTestCase extends Backdropi18nTestCase {

  /**
   * Set up.
   */
  public function setUp() {
    parent::setUp('translation', 'i18n_select', 'i18n_string', 'i18n_translation');
    parent::setUpLanguages(array('administer fields'));
    parent::setUpContentTranslation();
  }

  /**
   *
   */
  function testIi18nSelect() {
    backdrop_static_reset('language_list');
    $language_list = language_list();
    $language_count = count($language_list);
    $config = config('node.type.page');
    $config->set('settings.promote_enabled', TRUE);
    $config->set('settings.sticky_enabled', TRUE);
    $config->set('settings.promote_default', TRUE);
    $config->save();

    // Set site name for each language and check pages later.
    $site_name = 'Backdrop-English';
    config_set('system.core', 'site_name', $site_name);
    // Let locale know about the new string.
    $trigger = locale('Backdrop-English', 'config:system.core:site_name', $this->secondaryLanguage);
    $context = 'config:system.core:site_name';
    $lid = db_query("SELECT lid FROM {locales_source} WHERE source = :source AND context = :context", array(
      ':source' => $site_name,
      ':context' => $context))->fetchField();

    foreach (i18n_language_list() as $langcode => $name) {
      if ($langcode == 'en') {
        continue;
      }
      else {
        $edit = array(
          "translations[$langcode]" => "Backdrop-$name",
        );
        // Translate via UI.
        $this->backdropPost('admin/config/regional/translate/edit/' . $lid, $edit, t('Save translations'));
      }
    }

    // Enable tags field for page content type.
    $edit = array(
      'fields[_add_existing_field][label]' => t('Tags'),
      'fields[_add_existing_field][field_name]' => 'field_tags',
      'fields[_add_existing_field][widget_type]' => 'taxonomy_autocomplete',
    );
    $this->backdropPost('admin/structure/types/manage/page/fields', $edit, t('Save'));
    $this->backdropPost(NULL, array(), t('Save settings'));

    // Create some content and check selection modes.
    $this->backdropLogin($this->content_editor);
    $neutral = $this->backdropCreateNode(array('type' => 'page', 'promote' => 1));
    $source = $this->createNode('page', $this->randomName(), $this->randomString(20), language_default()->langcode, array('field_tags[und]' => $tag_name = $this->randomName()));
    $this->backdropGet('node/' . $source->nid . '/translate');
    $translations = $this->createNodeTranslationSet($source);
    $this->assertEqual(count($translations), $language_count, "Created $language_count $source->type translations.");

    // Default selection mode, only language neutral and current
    config_set('i18n_select.settings', 'i18n_select_nodes', TRUE);
    // Set the frontpage to old-school /node path.
    config_set('system.core', 'site_frontpage', 'node');
    foreach (i18n_language_list() as $langcode => $name) {
      $this->i18nGet($langcode);
      $this->assertText("Backdrop-$name", 'Checked translated site name: Backdrop-' . $name);
      $display = array($translations[$langcode], $neutral);
      $hide = $translations;
      unset($hide[$langcode]);
      $this->assertContent($display, $hide);
      // Visit the taxonomy page of that node and try again. Only the translated
      // pages are tagged.
      unset($display[1]);
      $this->i18nGet($langcode, 'taxonomy/term/' . $source->field_tags[LANGUAGE_NONE][0]['tid']);
      $this->assertContent($display, $hide);
    }

  }

  /**
   * Check some nodes are displayed, some are not
   */
  function assertContent($display, $hide = array()) {
    $languages = language_list();
    foreach ($display as $node) {
      $this->assertText($node->title, 'Content displayed for ' . i18n_language_name($node->langcode));
    }
    foreach ($hide as $node) {
      $this->assertNoText($node->title, 'Content not displayed for ' . i18n_language_name($node->langcode));
    }
  }

}
