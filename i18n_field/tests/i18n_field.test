<?php
/**
 * @file
 * Test case for multilingual fields.
 */

require_once __DIR__ . '/../../tests/i18n.test';
/**
 * Testing class for i18n_field.
 */
class i18nFieldTestCase extends Backdropi18nTestCase {

  /**
   * Set up.
   */
  public function setUp() {
    parent::setUp('i18n_field', 'field_test');
    parent::setUpLanguages(array(
      'access field_test content',
      'administer field_test content',
    ));
    $this->translator = $this->backdropCreateUser(array(
      'translate interface',
      'translate user-defined strings',
    ));
    return TRUE;
  }

  /**
   * Test the translation of list fields, including allowed values.
   */
  public function testListFieldTranslation() {
    $field_name = backdrop_strtolower($this->randomName());
    $label = $this->randomName();
    $description = $this->randomName();
    $value = $this->randomName();

    $field = array(
      'field_name' => $field_name,
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(1 => $value),
      ),
    );
    $field = field_create_field($field);

    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'label' => $label,
      'description' => $description,
      'widget' => array(
        'type' => 'options_buttons',
      ),
    );
    $instance = field_create_instance($instance);

    // Refresh i18n_strings.
    $edit = array('groups[field]' => TRUE);
    $this->backdropPost('admin/config/regional/translate/i18n_string', $edit, t('Refresh strings'));

    // Save translations for each attribute.
    $label_translation = $this->createStringTranslation('field', $label);
    $description_translation = $this->createStringTranslation('field', $description);
    $value_translation = $this->createStringTranslation('field', $value);
    $this->backdropLogin($this->admin_user);

    // Test untranslated values in default language.
    $this->backdropGet('test-entity/add/test-bundle');
    $this->assertText($label, 'Field label is not translated');
    $this->assertText($description, 'Field description is not translated');
    $this->assertText($value, 'Field allowed values are not translated');

    // Test translated values in secondary language.
    $this->backdropGet($this->secondaryLanguage . '/test-entity/add/test-bundle');
    $this->assertText($label_translation[$this->secondaryLanguage], 'Field label is translated');
    $this->assertText($description_translation[$this->secondaryLanguage], 'Field description is translated');
    $this->assertText($value_translation[$this->secondaryLanguage], 'Field allowed values are translated');
  }

  /**
   * Test the translation of text fields, including default values.
   */
  public function testTextFieldTranslation() {
    $field_name = backdrop_strtolower($this->randomName());
    $label = $this->randomName();
    $description = $this->randomName();
    $default_value = $this->randomName();

    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'cardinality' => 1,
    );
    $field = field_create_field($field);

    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'label' => $label,
      'description' => $description,
      'default_value' => array(0 => array('value' => $default_value)),
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    $instance = field_create_instance($instance);

    // Refresh i18n_strings.
    $edit = array('groups[field]' => TRUE);
    $this->backdropPost('admin/config/regional/translate/i18n_string', $edit, t('Refresh strings'));

    // Save translations for each attribute.
    $label_translation = $this->createStringTranslation('field', $label);
    $description_translation = $this->createStringTranslation('field', $description);
    $default_value_translation = $this->createStringTranslation('field', $default_value);
    $this->backdropLogin($this->admin_user);

    // Test untranslated values in default language.
    $this->backdropGet('test-entity/add/test-bundle');
    $this->assertText($label, 'Field label is not translated');
    $this->assertText($description, 'Field description is not translated');
    $this->assertRaw($default_value, 'Default value is not translated');

    // Test translated values in secondary language.
    $this->backdropGet($this->secondaryLanguage . '/test-entity/add/test-bundle');
    $this->assertText($label_translation[$this->secondaryLanguage], 'Field label is translated');
    $this->assertText($description_translation[$this->secondaryLanguage], 'Field description is translated');
    $this->assertRaw($default_value_translation[$this->secondaryLanguage], 'Default value translated');
  }

  /**
   * Test the translation of field description with token replacement.
   */
  public function testTextFieldTranslationTokens() {
    $field_name = backdrop_strtolower($this->randomName());
    $description = 'Foobar description for [site:name]';

    $field = array(
      'field_name' => $field_name,
      'type' => 'text',
      'cardinality' => 1,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'label' => $this->randomName(),
      'description' => $description,
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);

    // Refresh i18n_strings.
    $edit = array('groups[field]' => TRUE);
    $this->backdropPost('admin/config/regional/translate/i18n_string', $edit, t('Refresh strings'));

    // Save description translation.
    // We can't use createStringTranslation because of the white spaces in our
    // string.
    $description_es = 'Foobar descripción para [site:name]';
    $description_es_tok = 'Foobar descripción para ' . config_get('system.core', 'site_name');

    $this->backdropLogin($this->translator);
    $search = array(
      'string' => $description,
      'language' => 'all',
      'translation' => 'untranslated',
    );
    $this->backdropPost('admin/config/regional/translate/translate', $search, t('Filter'));
    $this->clickLink(t('Edit'));
    $edit = array(
      'translations[' . $this->secondaryLanguage . ']' => $description_es,
    );
    $this->backdropPost(NULL, $edit, t('Save translations'));
    $this->assertText(t('The string has been saved.'));

    // Verify that token got replaced in translated field display.
    $this->backdropLogin($this->admin_user);
    $this->backdropGet($this->secondaryLanguage . '/test-entity/add/test-bundle');
    $this->assertText($description_es_tok);
  }

}
