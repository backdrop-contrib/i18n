<?php

/**
 * @file
 * Installation file for i18n_string module.
 */

/**
 * Implements hook_enable().
 */
function i18n_string_enable() {
  // Refresh locales for enabled modules
  $modules = module_implements('i18n_string_refresh');
  i18n_string_modules_enabled($modules);
}

/**
 * Implements hook_install().
 */
function i18n_string_install() {
  $language = language_default();
  config_set('i18n.settings', 'i18n_string_source_language', $language->langcode);
  // Add a field to track whether a translation needs updating.
  module_load_install('i18n');
  i18n_install_create_fields('locales_target', array('i18n_status'));
  i18n_install_create_fields('locales_source', array('textgroup'));
  // Set module weight for it to run after core modules.
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'i18n_string' AND type = 'module'");

  // Create new index in {locales_source}, performance improvement in sites with i18n.
  db_add_index('locales_source', 'textgroup_context', array('textgroup', 'context'));
}

/**
 * Implements hook_uninstall().
 */
function i18n_string_uninstall() {
  // Drop custom field.
  db_drop_field('locales_target', 'i18n_status');
  db_drop_field('locales_source', 'textgroup');
  // Drop custom index in locales_source table
  db_drop_index('locales_source', 'textgroup_context');
}

/**
 * Implements hook_schema().
 */
function i18n_string_schema() {
  $schema['i18n_string'] = array(
    'description' => 'Metadata for source strings.',
    'fields' => array(
      'lid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Source string ID. References {locales_source}.lid.',
      ),
      'textgroup' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => 'default',
        'description' => 'A module defined group of translations, see hook_locale().',
      ),
      'context' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Full string ID for quick search: type:objectid:property.',
      ),
      'objectid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Object ID.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Object type for this string.',
      ),
      'property' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Object property for this string.',
      ),
      'objectindex' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Integer value of Object ID.',
      ),
      'format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The {filter_format}.format of the string.',
      ),

    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'group_context' => array('textgroup', array('context', 50)),
    ),
  );
  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function i18n_string_schema_alter(&$schema) {
  // Add field for tracking whether translations need updating.
  $schema['locales_target']['fields']['i18n_status'] = array(
    'description' => 'A boolean indicating whether this translation needs to be updated.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  
  // Locale in core dropped textgroup column for locales_source
  // It assumes that i18n has migrated it BEFORE dropping.
  $schema['locales_source']['fields']['textgroup'] = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => 'default',
    'description' => 'A module defined group of translations, see hook_locale().',
  );
}

/**
 * Helper function to upate strings
 */
function i18n_string_install_update_string($string) {
  $string->context = $string->type . ':' . $string->objectid . ':' . $string->property;
  $string->location = $string->textgroup . ':' . $string->context;
  $string->objectindex = (int)$string->objectid;
  backdrop_write_record('i18n_string', $string, 'lid');
  backdrop_write_record('locales_source', $string, 'lid');
}

/**
 * Update context for strings.
 *
 * As some string locations depend on configurable values, the field needs sometimes to be updated
 * without losing existing translations. I.e:
 * - profile fields indexed by field name.
 * - content types indexted by low level content type name.
 *
 * Example:
 *  'profile:field:oldfield:*' -> 'profile:field:newfield:*'
 */
function i18n_string_install_update_context($oldname, $newname) {
  // Get context replacing '*' with empty string.
  $oldcontext = explode(':', $oldname);
  $newcontext = explode(':', $newname);
  /*
  i18n_string_context(str_replace('*', '', $oldname));
  $newcontext = i18n_string_context(str_replace('*', '', $newname));
  */
  // Get location with placeholders.
  foreach (array('textgroup', 'type', 'objectid', 'property') as $index => $field) {
    if ($oldcontext[$index] != $newcontext[$index]) {
      $replace[$field] = $newcontext[$index];
    }
  }

  // Query and replace if there are any fields. It is possible that under some circumstances fields are the same
  if (!empty($replace)) {
    $textgroup = array_shift($oldcontext);
    $context = str_replace('*', '%', implode(':', $oldcontext));
    $count = 0;
    $query = db_select('i18n_string', 's')
      ->fields('s')
      ->condition('s.textgroup', $textgroup)
      ->condition('s.context', $context, 'LIKE');

    foreach ($query->execute()->fetchAll() as $source) {
      foreach ($replace as $field => $value) {
        $source->$field = $value;
      }
      // Recalculate location, context, objectindex
      $source->context = $source->type . ':' . $source->objectid . ':' . $source->property;
      $source->location = $source->textgroup . ':' . $source->context;
      $source->objectindex = (int)$source->objectid;
      // Update source string.
      $update = array(
        'textgroup' => $source->textgroup,
        'context' => $source->context,
      );
      db_update('locales_source')
        ->fields($update + array('location' => $source->location))
        ->condition('lid', $source->lid)
        ->execute();

      // Update object data.
      db_update('i18n_string')
      ->fields($update + array(
        'type' => $source->type,
        'objectid' => $source->objectid,
        'property' => $source->property,
        'objectindex' => $source->objectindex,
      ))
      ->condition('lid', $source->lid)
      ->execute();
      $count++;
    }
    backdrop_set_message(t('Updated @count string names from %oldname to %newname.', array('@count' => $count, '%oldname' => $oldname, '%newname' => $newname)));
  }
}


/**
 * Implements hook_update_last_removed().
 */
function i18n_string_update_last_removed() {
  return 7002;
}

/**
 * Move book settings from variables to config.
 */
function i18n_string_update_1000() {
  // Migrate variables to config.
  $config = config('i18n.settings');
  $config->set('debug', update_variable_get('i18n_string_debug', FALSE));
  $config->set('i18n_loaded_translations', update_variable_get('i18n_loaded_translations',array()));
  $config->set('i18n_string_allowed_formats', update_variable_get('i18n_string_allowed_formats', array(filter_fallback_format())));
  //i18n_string_debug_' . $textgroup -- update all without knowing how many?

  $config->save();

  // Delete variables.
  update_variable_del('i18n_string_debug');
  update_variable_del('i18n_loaded_translations');
  update_variable_del('i18n_string_allowed_formats');
}