<?php
/**
 * @file
 * Helper module for testing i18n.
 */

/**
 * Implements hook_init().
 */
function i18n_test_init() {
  // We just implement this hook so this one is loaded always on bootstap.
}

/**
 * Implements hook_i18n_string_info().
 */
function i18n_test_i18n_string_info() {
  $groups['test'] = array(
    'title' => t('Test'),
    'description' => t('Translatable menu items: title and description.'),
  // This group doesn't have strings with format.
    'format' => FALSE,
    'refresh callback' => 'i18n_test_i18n_string_refresh',
  );
  $groups['test_cached'] = array(
    'title' => t('Test Cached Strings'),
    'description' => t('Translatable items of a textgroup with caching enabled.'),
  // This group doesn't have strings with format.
    'format' => FALSE,
    'class' => 'i18n_string_textgroup_cached_logged',
  );
  return $groups;
}

/**
 * Locale refresh.
 */
function i18n_test_i18n_string_refresh() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function i18n_test_menu() {
  // Required for the i18n_string caching tests.
  $items['tests/i18n/i18n_string_build/%'] = array(
    'title' => 'Load string',
    'access callback' => TRUE,
    'page callback' => 'i18n_string_build_page',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'backdrop_json_output',
  );
  $items['tests/i18n/i18n_string_build/%/%'] = array(
    'title' => 'Load string',
    'access callback' => TRUE,
    'page callback' => 'i18n_string_build_page',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'backdrop_json_output',
  );
  $items['tests/i18n/i18n_string_translation_search/%'] = array(
    'title' => 'Search string translations',
    'access callback' => TRUE,
    'page callback' => 'i18n_string_translation_search',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'backdrop_json_output',
  );
  $items['tests/i18n/i18n_string_translation_search/%/%'] = array(
    'title' => 'Search string translations',
    'access callback' => TRUE,
    'page callback' => 'i18n_string_translation_search',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'backdrop_json_output',
  );
  return $items;
}

/**
 * Custom page callback.
 */
function i18n_string_build_page($name, $string = NULL) {
  // Cast object to array.
  $content = (array) i18n_string_build($name, $string);
  return $content;
}

require_once __DIR__ . '/../i18n_string/i18n_string.inc';
/**
 * Helper class for easier test evaluation.
 *
 * @todo Change this class to camelcase as soon as the base class is camelcase.
 */
// @codingStandardsIgnoreStart
class i18n_string_textgroup_cached_logged extends i18n_string_textgroup_cached {

  /**
   * Load translation.
   */
  public static function load_translation($i18nstring, $langcode) {
    $strings = config_get('i18n.settings', 'i18n_loaded_translations');
    $strings[$i18nstring->get_name()] = TRUE;
    config_set('i18n.settings', 'i18n_loaded_translations', $strings);
    parent::load_translation($i18nstring, $langcode);
  }

}
// @codingStandardsIgnoreEnd
